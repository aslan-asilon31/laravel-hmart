<?php

namespace App\Livewire\Pages\Visitor\HomeResources;

use App\Models\Marketplace;
use Livewire\Component;
use App\Models\ProductBrand;   
use App\Models\Product;   
use App\Models\ProductContent;   
use App\Models\ProductCategoryFirst;
use App\Models\ProductCategorySecond;  
use Illuminate\Support\Facades\DB; 

use App\Models\SalesCart; 
use App\Models\SalesCartDetail; 
use Illuminate\Support\Facades\Session; 

use App\Services\ProductService;
use App\Services\CartService;

class HomeList extends Component
{
    public $invoice;

    public $products;
    protected $productService;
    public $cartItems = [];  
    protected $loadCartItemDatas;


    public string $title = 'Home';  
    public string $url = '/home';
    public $product_category_firsts;   
    public $product_category_second;   
    public $product_brands = [];   
    public $product_brand_lists;   
    public $product_contents  = [];   
    public $product_content = [];   
    public $marketplaces; 
    public $product_lists;   
    public $product; 
    public $isProductInCart = []; 
    public $product_detail = []; 
    public $productId = [];  

    public $brands = [];  
    public $index = 0;  
    public $sessionId;  
    public $id;  

    public CartService $cartService;

    public function rules()  
    {  
        return [  
            'cartItems.*.qty' => 'required|integer|min:1', 
        ];  
    }  

    public function initialize()
    {
        
        $this->product_contents =  ProductContent::query()
          ->join('products', 'product_contents.product_id', 'products.id')
          ->join('product_brands', 'products.product_brand_id', '=', 'product_brands.id') 
          ->select([
            'product_contents.id',
            'products.id AS products_id',
            'products.name AS products_name',
            'products.selling_price AS product_selling_price',
            'products.discount_value AS product_discount_value',
            'products.nett_price AS product_nett_price',
            'products.weight AS product_weight',
            'products.is_new AS product_is_new',
            'products.availability AS product_availability',
            'products.discount_persentage AS product_discount_persentage',
            'product_contents.title',
            'product_contents.slug',
            'product_contents.url',
            'product_contents.image_url',
            'product_contents.created_by',
            'product_contents.updated_by',
            'product_contents.created_at',
            'product_contents.updated_at',
            'product_contents.is_activated',
            'product_brands.name AS product_brand_name',
        ])->get();

        $this->product_lists =  ProductContent::query()
          ->join('products', 'product_contents.product_id', 'products.id')
          ->select([
            'product_contents.id',
            'products.id AS products_id',
            'products.name AS products_name',
            'products.selling_price AS product_selling_price',
            'products.discount_value AS product_discount_value',
            'products.nett_price AS product_nett_price',
            'products.weight AS product_weight',
            'products.is_new AS product_is_new',
            'products.discount_persentage AS product_discount_persentage',
            'product_contents.title',
            'product_contents.slug',
            'product_contents.url',
            'product_contents.image_url',
            'product_contents.created_by',
            'product_contents.updated_by',
            'product_contents.created_at',
            'product_contents.updated_at',
            'product_contents.is_activated',
        ])->get();

        $this->product_brands =  ProductBrand::query()
          ->select([
            'product_brands.id',
            'product_brands.name',
            'product_brands.image_url',
            'product_brands.desc',
            'product_brands.created_by',
            'product_brands.updated_by',
            'product_brands.created_at',
            'product_brands.updated_at',
            'product_brands.is_activated',
        ])->get();

        $this->marketplaces =  Marketplace::query()
          ->select([
            'marketplaces.id',
            'marketplaces.name',
            'marketplaces.url',
            'marketplaces.image_url',
            'marketplaces.is_activated',
        ])->where('marketplaces.is_activated', 1)->get();

        $this->product_brand_lists = ProductBrand::query()  
        ->with(['products' => function ($query) {  
            $query->take(5); // Ambil maksimal 5 produk untuk setiap brand  
        }])  
        ->inRandomOrder()  
        ->take(2)  
        ->get();

    }

    public function productDetail($product_id)
    {
        $this->reset();
        $this->product_detail = Product::with(['productCategoryFirst','productContent'])->where('id', $product_id)->first();
    }
    
    public function render()
    {
        return view('livewire.pages.visitor.home-resources.home-list')
          ->layout('components.layouts.app_visitor')
        ->title($this->title);
    }




    public function mount() 
    {  

        $this->cartService = new CartService();
        $this->cartService->loadCartItems();

        $this->product_category_firsts =  ProductCategoryFirst::all();
        $this->initialize();

    }  



}
